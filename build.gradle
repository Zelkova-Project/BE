buildscript {
    ext {
        restdocsApiSpecVersion = '0.19.2'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
    id 'org.hidetake.swagger.generator' version '2.19.2'
}

group = 'be'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // querydsl
    implementation "com.querydsl:querydsl-jpa:${dependencyManagement.importedProperties["querydsl.version"]}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties["querydsl.version"]}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // swaggerUI
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"
    swaggerUI 'org.webjars:swagger-ui:5.15.1'

    // oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
}

tasks.named('test') {
    useJUnitPlatform()
}

def querydslSrcDir = 'src/main/generated'

clean {
    delete file(querydslSrcDir)
    delete file("src/main/resources/static/docs/")
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslSrcDir))
}

openapi3 {
    server = "http//localhost:8080"
    title = "Zelkova API"
    description = "Zelkova API description"
    version = "0.1.0"
    format = "json"
}

swaggerSources {
    sample {
        setInputFile(file("${openapi3.outputDirectory}/openapi3.json"))
    }
}

tasks.withType(GenerateSwaggerUI).configureEach {
    dependsOn "openapi3"
}

tasks.register("copySwaggerUISample") {
    doLast {
        copy {
            from("${generateSwaggerUISample.outputDir}")
            into("src/main/resources/static/docs/")
        }
    }
}

bootJar {
    dependsOn generateSwaggerUISample

    ext.profile = (!project.hasProperty('profile') || !profile) ? 'none' : profile

    if ("${profile}" == 'local') {
        finalizedBy copySwaggerUISample
    }
}
